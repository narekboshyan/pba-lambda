name: Deploy MP4 to HLS Converter to AWS

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  NODE_VERSION: "20"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: TypeScript check
        run: yarn build

      - name: Lint check
        run: yarn lint

  deploy:
    needs: test
    runs-on: ubuntu-latest
    # keep your branch gate
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    # 👇 this is what "attaches" the job to your Environment
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # from Environment: production
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # from Environment: production
          aws-region: ${{ env.AWS_REGION }}

      - name: Install CDK CLI
        run: npm i -g aws-cdk@2 && cdk --version

      - name: CDK Bootstrap (with existing bucket handling)
        run: |
          set -e  # Exit on any error
          echo "=== CDK Bootstrap Debug Info ==="
          echo "Current AWS Region: ${{ env.AWS_REGION }}"
          echo "Current working directory: $(pwd)"

          echo "=== Checking AWS credentials ==="
          aws sts get-caller-identity || exit 1
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "Account ID: $ACCOUNT_ID"

          echo "=== Checking existing CDK bootstrap ==="
          if aws cloudformation describe-stacks --stack-name CDKToolkit --region "${{ env.AWS_REGION }}" 2>/dev/null; then
            echo "CDKToolkit stack already exists - checking if it's healthy"
            STACK_STATUS=$(aws cloudformation describe-stacks --stack-name CDKToolkit --region "${{ env.AWS_REGION }}" --query 'Stacks[0].StackStatus' --output text)
            echo "Stack status: $STACK_STATUS"

            if [[ "$STACK_STATUS" == "ROLLBACK_COMPLETE" ]] || [[ "$STACK_STATUS" == "CREATE_FAILED" ]]; then
              echo "Stack is in failed state - deleting it first"
              aws cloudformation delete-stack --stack-name CDKToolkit --region "${{ env.AWS_REGION }}"
              echo "Waiting for stack deletion to complete..."
              aws cloudformation wait stack-delete-complete --stack-name CDKToolkit --region "${{ env.AWS_REGION }}"
              echo "Stack deleted successfully"
            elif [[ "$STACK_STATUS" == "CREATE_COMPLETE" ]] || [[ "$STACK_STATUS" == "UPDATE_COMPLETE" ]]; then
              echo "CDK is already bootstrapped successfully - skipping bootstrap"
              exit 0
            fi
          else
            echo "CDKToolkit stack not found - will create new one"
          fi

          echo "=== Checking for orphaned S3 bucket ==="
          BUCKET_NAME="cdk-hnb659fds-assets-${ACCOUNT_ID}-${{ env.AWS_REGION }}"
          if aws s3 ls "s3://$BUCKET_NAME" 2>/dev/null; then
            echo "Found existing CDK assets bucket: $BUCKET_NAME"
            echo "This is likely from a previous failed bootstrap - cleaning it up"

            # Empty the bucket first
            aws s3 rm "s3://$BUCKET_NAME" --recursive || true

            # Delete the bucket
            aws s3 rb "s3://$BUCKET_NAME" || true

            echo "Cleaned up orphaned CDK assets bucket"
          fi

          echo "=== Starting CDK Bootstrap ==="
          cdk bootstrap --verbose

          echo "=== Verifying bootstrap success ==="
          aws cloudformation describe-stacks --stack-name CDKToolkit --region "${{ env.AWS_REGION }}"

          echo "=== Bootstrap completed successfully ==="

      - name: CDK Synth
        run: yarn synth

      - name: CDK Diff
        run: |
          echo "## CDK Diff" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          npx cdk diff >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Verify Bootstrap Assets
        run: |
          echo "=== Final verification of CDK assets bucket ==="
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          BUCKET_NAME="cdk-hnb659fds-assets-${ACCOUNT_ID}-${{ env.AWS_REGION }}"
          echo "Expected bucket name: $BUCKET_NAME"

          if aws s3 ls "s3://$BUCKET_NAME" >/dev/null 2>&1; then
            echo "✅ Assets bucket exists and is accessible: $BUCKET_NAME"
          else
            echo "❌ Assets bucket missing: $BUCKET_NAME"
            echo "This is unexpected after successful bootstrap"
            exit 1
          fi

      - name: CDK Deploy
        run: |
          npx cdk deploy \
            --require-approval never \
            VideoProcessingStack

      - name: Get deployment outputs
        run: |
          echo "## Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "Environment: production" >> $GITHUB_STEP_SUMMARY
          echo "Region: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          aws cloudformation describe-stacks \
            --stack-name VideoProcessingStack \
            --query 'Stacks[0].Outputs' \
            --output table >> $GITHUB_STEP_SUMMARY || true

  cleanup-on-failure:
    needs: deploy
    runs-on: ubuntu-latest
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    # attach to production so env-scoped secrets are available here too
    environment: production
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Notify failure
        run: |
          echo "Deployment failed. Manual cleanup may be required."
          echo "Check CloudFormation stack: VideoProcessingStack"
