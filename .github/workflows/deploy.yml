name: Deploy pba-lambda to AWS

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  NODE_VERSION: "20"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: TypeScript check
        run: yarn build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    # keep your branch gate
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    # 👇 this is what "attaches" the job to your Environment
    environment: production

    # expose Environment Variables to shell steps
    env:
      INPUT_BUCKET: ${{ vars.INPUT_BUCKET }}
      OUTPUT_BUCKET: ${{ vars.OUTPUT_BUCKET }}
      PREFIX: ${{ vars.PREFIX }}
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      CDK_STACK_NAME: ${{ vars.CDK_STACK_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # from Environment: production
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # from Environment: production
          aws-region: ${{ env.AWS_REGION }}

      - name: Install CDK CLI
        run: npm i -g aws-cdk@2 && cdk --version

      - name: CDK Bootstrap (force)
        run: |
          set -e  # Exit on any error
          echo "=== CDK Bootstrap Debug Info ==="
          echo "Current AWS Region: ${{ env.AWS_REGION }}"
          echo "Current working directory: $(pwd)"
          
          echo "=== Checking AWS credentials ==="
          aws sts get-caller-identity || exit 1
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "Account ID: $ACCOUNT_ID"
          
          echo "=== Checking existing CDK bootstrap ==="
          aws cloudformation describe-stacks --stack-name CDKToolkit --region "${{ env.AWS_REGION }}" || echo "CDKToolkit stack not found"
          
          echo "=== Starting CDK Bootstrap ==="
          cdk bootstrap --force --verbose --debug
          
          echo "=== Verifying bootstrap success ==="
          aws cloudformation describe-stacks --stack-name CDKToolkit --region "${{ env.AWS_REGION }}"
          
          echo "=== Bootstrap completed successfully ==="

      - name: CDK Synth
        run: cdk synth --context environment=production

      - name: CDK Diff
        run: |
          echo "## CDK Diff" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cdk diff --context environment=production >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Verify Bootstrap Assets
        run: |
          echo "=== Verifying CDK assets bucket exists ==="
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          BUCKET_NAME="cdk-hnb659fds-assets-${ACCOUNT_ID}-${{ env.AWS_REGION }}"
          echo "Expected bucket name: $BUCKET_NAME"
          
          if aws s3 ls "s3://$BUCKET_NAME" >/dev/null 2>&1; then
            echo "✅ Assets bucket exists: $BUCKET_NAME"
          else
            echo "❌ Assets bucket missing: $BUCKET_NAME"
            echo "Re-running bootstrap..."
            cdk bootstrap --force --verbose
          fi

      - name: CDK Deploy
        run: |
          cdk deploy \
            --require-approval never \
            --context environment=production \
            --context inputBucket="${INPUT_BUCKET}" \
            --context outputBucket="${OUTPUT_BUCKET}" \
            --context prefix="${PREFIX}"

      - name: Get deployment outputs
        run: |
          echo "## Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "Environment: production" >> $GITHUB_STEP_SUMMARY
          echo "Region: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          aws cloudformation describe-stacks \
            --stack-name "${CDK_STACK_NAME:-Mp4ToHlsStack}" \
            --query 'Stacks[0].Outputs' \
            --output table >> $GITHUB_STEP_SUMMARY || true

  cleanup-on-failure:
    needs: deploy
    runs-on: ubuntu-latest
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    # attach to production so env-scoped secrets are available here too
    environment: production
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Notify failure
        run: |
          echo "Deployment failed. Manual cleanup may be required."
          echo "Check CloudFormation stack: ${CDK_STACK_NAME:-Mp4ToHlsStack}"
